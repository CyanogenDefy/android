If you have forked projects on github, it may be usefull to stay up to date with "upstream" git repositories.

Here is my method :

in each forked projects (separated from your repo tree), create a script named merge_cron.sh


#!/bin/bash

# git fetch cyanogen
# git merge remotes/cyanogen/gingerbread

git fetch quarx
git merge remotes/quarx/gingerbread

# git merge tpruvot
# git merge remotes/tpruvot/gingerbread

git push



for this example, you need to define upstream remotes in your git directory with the forked project :

git remote add quarx git://github.com/Quarx2k/android_device_motorola_umts_jordan.git



Now, we create another script to select the wanted projects (named /git/defy_cyanogen_update.sh)

#!/bin/bash

date
cd /git/android && ./merge_cron.sh
cd /git/android_frameworks_base && ./merge_cron.sh
cd /git/android_device_motorola_umts_jordan && ./merge_cron.sh
cd /git/android_vendor_cyanogen && ./merge_cron.sh
cd /git/android_bootable_recovery && ./merge_cron.sh

# remove duplicates from log to keep date of sync and updated projects
cat /git/merge_cron_log.txt | grep -v "Already up-to-date." | uniq > /git/merge_cron.log




Finally, create a cron job with this kind of content : (/etc/cron.d/cyanogen_defy)
This line will execute a git merge every 6 hours...


2 0,6,12,18 * * *     root   cd /git && ./defy_cyanogen_update.sh >> /git/merge_cron_log.txt 2>&1


